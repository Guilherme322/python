import telebot
import requests
import sqlite3
from telebot import types

API_KEY = '0bb85d21A5ecd898f0AAc5cdd2939c5c'
BOT_TOKEN = '7998411332:AAEBwR4zCxA7RnonNrb2eTqRddfL-fUv8Q4'
bot = telebot.TeleBot(BOT_TOKEN)

# Banco de dados SQLite
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, balance REAL DEFAULT 0)")
conn.commit()

def get_user_balance(user_id):
    cursor.execute("SELECT balance FROM users WHERE id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        return row[0]
    else:
        cursor.execute("INSERT INTO users (id, balance) VALUES (?, ?)", (user_id, 0))
        conn.commit()
        return 0

def update_user_balance(user_id, amount):
    cursor.execute("UPDATE users SET balance=? WHERE id=?", (amount, user_id))
    conn.commit()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    get_user_balance(user_id)
    bot.send_message(message.chat.id, f"👋 Olá, bem-vindo ao SMS Premium Star Bot!
Seu saldo: R${get_user_balance(user_id):.2f}
Digite /comprar para adquirir um número.")

@bot.message_handler(commands=['saldo'])
def saldo(message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    bot.send_message(message.chat.id, f"💰 Seu saldo: R${balance:.2f}")

@bot.message_handler(commands=['comprar'])
def comprar(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("WhatsApp", callback_data="compra_whatsapp"),
        types.InlineKeyboardButton("Telegram", callback_data="compra_telegram")
    )
    markup.row(
        types.InlineKeyboardButton("Instagram", callback_data="compra_instagram"),
        types.InlineKeyboardButton("TikTok", callback_data="compra_tiktok")
    )
    markup.row(types.InlineKeyboardButton("Cassino", callback_data="compra_cassino"))
    bot.send_message(message.chat.id, "Escolha o serviço desejado:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("compra_"))
def handle_compra(call):
    user_id = call.from_user.id
    service = call.data.split("_")[1]
    service_codes = {
        "whatsapp": "wa",
        "telegram": "tg",
        "instagram": "ig",
        "tiktok": "tt",
        "cassino": "ot"
    }
    prices = {
        "whatsapp": 2.00,
        "telegram": 1.50,
        "instagram": 1.80,
        "tiktok": 1.80,
        "cassino": 2.50
    }
    saldo = get_user_balance(user_id)
    preco = prices.get(service, 2.0)
    if saldo < preco:
        bot.send_message(call.message.chat.id, "❌ Saldo insuficiente. Digite /saldo para ver seu saldo atual.")
        return

    url = f"https://api.sms-activate.org/stubs/handler_api.php?api_key={API_KEY}&action=getNumber&service={service_codes[service]}&country=0"
    response = requests.get(url).text

    if "ACCESS_NUMBER" in response:
        _, oper_id, numero = response.split(":")
        update_user_balance(user_id, saldo - preco)
        bot.send_message(call.message.chat.id, f"✅ Número: `{numero}`
Aguardando código...", parse_mode="Markdown")
        check_sms(call.message.chat.id, oper_id)
    else:
        bot.send_message(call.message.chat.id, "❌ Erro ao obter número. Tente novamente mais tarde.")

def check_sms(chat_id, operation_id):
    import time
    for _ in range(20):
        url = f"https://api.sms-activate.org/stubs/handler_api.php?api_key={API_KEY}&action=getStatus&id={operation_id}"
        response = requests.get(url).text
        if "STATUS_OK" in response:
            code = response.split(":")[1]
            bot.send_message(chat_id, f"📩 Código recebido: `{code}`", parse_mode="Markdown")
            return
        time.sleep(5)
    bot.send_message(chat_id, "⏰ Tempo esgotado. Não recebemos o SMS.")

bot.polling()
